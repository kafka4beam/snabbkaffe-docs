searchNodes=[{"doc":"This is the main API module","ref":"snabbkaffe.html","title":"snabbkaffe","type":"module"},{"doc":"Print metrics to the console","ref":"snabbkaffe.html#analyze_statistics/0","title":"snabbkaffe.analyze_statistics/0","type":"function"},{"doc":"Equivalent to block_until(Filter, Timeout, infinity) .","ref":"snabbkaffe.html#block_until/2","title":"snabbkaffe.block_until/2","type":"function"},{"doc":"Block execution of the run stage of a testcase until an event matching Predicate is received or until Timeout . Note : since the most common use case for this function is the following: trigger_produce_event_async ( ) , snabbkaffe : block_until ( MatchEvent , 1000 ) there is a possible situation when the event is emitted before block_until function has a chance to run. In this case the latter will time out for no good reason. In order to work around this, block_until function actually searches for events matching Predicate in the past. BackInTime parameter determines how far back into past this function peeks. Note : In the current implementation Predicate runs for every received event. It means this function should be lightweight","ref":"snabbkaffe.html#block_until/3","title":"snabbkaffe.block_until/3","type":"function"},{"doc":"","ref":"snabbkaffe.html#causality/5","title":"snabbkaffe.causality/5","type":"function"},{"doc":"Throws an exception when consequitive elements of the list do not comply a binary relationship. Otherwise, returns true if the list is non-empty, and false when it is empty. Example: SeqNums = ? projection ( sequence_number , ? of_kind ( handle_message , Trace ) ) , ? assert ( snabbkaffe : check_conseq_relation ( SeqNums ) ) ,","ref":"snabbkaffe.html#check_conseq_relation/3","title":"snabbkaffe.check_conseq_relation/3","type":"function"},{"doc":"Cleanup the trace and the injected crashes and schedulings","ref":"snabbkaffe.html#cleanup/0","title":"snabbkaffe.cleanup/0","type":"function"},{"doc":"","ref":"snabbkaffe.html#collect_trace/0","title":"snabbkaffe.collect_trace/0","type":"function"},{"doc":"","ref":"snabbkaffe.html#collect_trace/1","title":"snabbkaffe.collect_trace/1","type":"function"},{"doc":"Dump trace to a file and return the file name","ref":"snabbkaffe.html#dump_trace/1","title":"snabbkaffe.dump_trace/1","type":"function"},{"doc":"Remove timestamps from the trace events","ref":"snabbkaffe.html#erase_timestamps/1","title":"snabbkaffe.erase_timestamps/1","type":"function"},{"doc":"Extract events of certain kind(s) from the trace","ref":"snabbkaffe.html#events_of_kind/2","title":"snabbkaffe.events_of_kind/2","type":"function"},{"doc":"Find pairs of complimentary events","ref":"snabbkaffe.html#find_pairs/4","title":"snabbkaffe.find_pairs/4","type":"function"},{"doc":"Redirect all the logs to the console","ref":"snabbkaffe.html#fix_ct_logging/0","title":"snabbkaffe.fix_ct_logging/0","type":"function"},{"doc":"Forward traces from the remote node to the local node.","ref":"snabbkaffe.html#forward_trace/1","title":"snabbkaffe.forward_trace/1","type":"function"},{"doc":"","ref":"snabbkaffe.html#get_stats/0","title":"snabbkaffe.get_stats/0","type":"function"},{"doc":"Throws an exception when elements of the list are not increasing. Otherwise, returns true if the list is non-empty, and false when it is empty. Example: SeqNums = ? projection ( sequence_number , ? of_kind ( handle_message , Trace ) ) , ? assert ( snabbkaffe : increasing ( SeqNums ) ) ,","ref":"snabbkaffe.html#increasing/1","title":"snabbkaffe.increasing/1","type":"function"},{"doc":"","ref":"snabbkaffe.html#local_tp/5","title":"snabbkaffe.local_tp/5","type":"function"},{"doc":"Implement all/0 callback for Common Test","ref":"snabbkaffe.html#mk_all/1","title":"snabbkaffe.mk_all/1","type":"function"},{"doc":"","ref":"snabbkaffe.html#pair_max_depth/1","title":"snabbkaffe.pair_max_depth/1","type":"function"},{"doc":"Extract specified field(s) from the list of events","ref":"snabbkaffe.html#projection/2","title":"snabbkaffe.projection/2","type":"function"},{"doc":"","ref":"snabbkaffe.html#projection_complete/3","title":"snabbkaffe.projection_complete/3","type":"function"},{"doc":"","ref":"snabbkaffe.html#projection_is_subset/3","title":"snabbkaffe.projection_is_subset/3","type":"function"},{"doc":"Report a scalar metric","ref":"snabbkaffe.html#push_stat/2","title":"snabbkaffe.push_stat/2","type":"function"},{"doc":"Report a metric with an X value","ref":"snabbkaffe.html#push_stat/3","title":"snabbkaffe.push_stat/3","type":"function"},{"doc":"Report metrics from pairs of events","ref":"snabbkaffe.html#push_stats/2","title":"snabbkaffe.push_stats/2","type":"function"},{"doc":"Report multiple values","ref":"snabbkaffe.html#push_stats/3","title":"snabbkaffe.push_stats/3","type":"function"},{"doc":"Receive the events for a subscription SubRef","ref":"snabbkaffe.html#receive_events/1","title":"snabbkaffe.receive_events/1","type":"function"},{"doc":"","ref":"snabbkaffe.html#remote_tp/5","title":"snabbkaffe.remote_tp/5","type":"function"},{"doc":"Retry an action until success, at max N times with an interval Interval","ref":"snabbkaffe.html#retry/3","title":"snabbkaffe.retry/3","type":"function"},{"doc":"Split list by predicate like this: [ true , true , false , true , true , false ] -&gt; [ [ true , true , false ] , [ true , true , false ] ]","ref":"snabbkaffe.html#splitl/2","title":"snabbkaffe.splitl/2","type":"function"},{"doc":"Split list by predicate like this: [ true , true , false , true , true , false ] -&gt; [ [ true , true ] , [ false , true , true ] , [ false ] ]","ref":"snabbkaffe.html#splitr/2","title":"snabbkaffe.splitr/2","type":"function"},{"doc":"","ref":"snabbkaffe.html#start_trace/0","title":"snabbkaffe.start_trace/0","type":"function"},{"doc":"Stop snabbkaffe","ref":"snabbkaffe.html#stop/0","title":"snabbkaffe.stop/0","type":"function"},{"doc":"Throws an exception when elements of the list are not strictly increasing. Otherwise, returns true if the list is non-empty, and false when it is empty. Example: SeqNums = ? projection ( sequence_number , ? of_kind ( handle_message , Trace ) ) , ? assert ( snabbkaffe : strictly_increasing ( SeqNums ) ) ,","ref":"snabbkaffe.html#strictly_increasing/1","title":"snabbkaffe.strictly_increasing/1","type":"function"},{"doc":"Equivalent to subscribe(Predicate, 1, infinity, 0) .","ref":"snabbkaffe.html#subscribe/1","title":"snabbkaffe.subscribe/1","type":"function"},{"doc":"Equivalent to subscribe(Predicate, 1, Timeout, 0) .","ref":"snabbkaffe.html#subscribe/2","title":"snabbkaffe.subscribe/2","type":"function"},{"doc":"Equivalent to subscribe(Predicate, NEvents, Timeout, 0) .","ref":"snabbkaffe.html#subscribe/3","title":"snabbkaffe.subscribe/3","type":"function"},{"doc":"Subscribe to events matching Predicate`, receive `NEvents of this type, or until Timeout happens, look at most BackInTime milliseconds into the past. The events can be received using receive_events/1 function.","ref":"snabbkaffe.html#subscribe/4","title":"snabbkaffe.subscribe/4","type":"function"},{"doc":"","ref":"snabbkaffe.html#tp/4","title":"snabbkaffe.tp/4","type":"function"},{"doc":"Throw an exception if some event is repeated","ref":"snabbkaffe.html#unique/1","title":"snabbkaffe.unique/1","type":"function"},{"doc":"Install a listener for the event matching Predicate , execute an action, then wait for the event to arrive, or until Timeout .","ref":"snabbkaffe.html#wait_async_action/3","title":"snabbkaffe.wait_async_action/3","type":"function"},{"doc":"","ref":"snabbkaffe.html#t:event/0","title":"snabbkaffe.event/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:filter/0","title":"snabbkaffe.filter/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:kind/0","title":"snabbkaffe.kind/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:maybe/1","title":"snabbkaffe.maybe/1","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:maybe_pair/0","title":"snabbkaffe.maybe_pair/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:metric/0","title":"snabbkaffe.metric/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:predicate/0","title":"snabbkaffe.predicate/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:predicate2/0","title":"snabbkaffe.predicate2/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:run_config/0","title":"snabbkaffe.run_config/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:timed_event/0","title":"snabbkaffe.timed_event/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:timestamp/0","title":"snabbkaffe.timestamp/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:trace/0","title":"snabbkaffe.trace/0","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:trace_spec/1","title":"snabbkaffe.trace_spec/1","type":"type"},{"doc":"","ref":"snabbkaffe.html#t:trace_specs/1","title":"snabbkaffe.trace_specs/1","type":"type"},{"doc":"This module implements &quot;nemesis&quot; process that injects faults into system under test in order to test its fault-tolerance. Usage Somewhere in the tested code ? maybe_crash ( kind1 , \#{ data1 =&gt; Foo , field2 =&gt; Bar } ) Somewhere in the run stage ? inject_crash ( \#{ ? snk_kind := kind1 , data1 := 42 } , snabbkaffe_nemesis : always_crash ( ) )","ref":"snabbkaffe_nemesis.html","title":"snabbkaffe_nemesis","type":"module"},{"doc":"","ref":"snabbkaffe_nemesis.html#always_crash/0","title":"snabbkaffe_nemesis.always_crash/0","type":"function"},{"doc":"Remove all injected crashes","ref":"snabbkaffe_nemesis.html#cleanup/0","title":"snabbkaffe_nemesis.cleanup/0","type":"function"},{"doc":"Remove injected fault","ref":"snabbkaffe_nemesis.html#fix_crash/1","title":"snabbkaffe_nemesis.fix_crash/1","type":"function"},{"doc":"Inject scheduling into the system","ref":"snabbkaffe_nemesis.html#force_ordering/3","title":"snabbkaffe_nemesis.force_ordering/3","type":"function"},{"doc":"Equivalent to inject_crash(Predicate, Scenario, notmyday) .","ref":"snabbkaffe_nemesis.html#inject_crash/2","title":"snabbkaffe_nemesis.inject_crash/2","type":"function"},{"doc":"Inject crash into the system","ref":"snabbkaffe_nemesis.html#inject_crash/3","title":"snabbkaffe_nemesis.inject_crash/3","type":"function"},{"doc":"A type of fault that occurs and fixes periodically.","ref":"snabbkaffe_nemesis.html#periodic_crash/3","title":"snabbkaffe_nemesis.periodic_crash/3","type":"function"},{"doc":"Crash with probability P","ref":"snabbkaffe_nemesis.html#random_crash/1","title":"snabbkaffe_nemesis.random_crash/1","type":"function"},{"doc":"Crash N times consequently, then recover","ref":"snabbkaffe_nemesis.html#recover_after/1","title":"snabbkaffe_nemesis.recover_after/1","type":"function"},{"doc":"","ref":"snabbkaffe_nemesis.html#t:fault_key/0","title":"snabbkaffe_nemesis.fault_key/0","type":"type"},{"doc":"","ref":"snabbkaffe_nemesis.html#t:fault_scenario/0","title":"snabbkaffe_nemesis.fault_scenario/0","type":"opaque"},{"doc":"If humans can find bugs by reading the logs, so can computers Read the documentation for the latest version. Snabbkaffe is a trace-based test framework for Erlang. It is lightweight and dependency-free. It works like this: Programmer manually instruments the code with trace points Testcases are split in two parts: Run stage where the program runs and emits event trace Check stage where trace is collected and validated against the spec(s) Trace points become structured log messages in the release build This approach can be used in a component test involving an ensemble of interacting processes. It has a few nice properties: Checks can be separated from the program execution Checks are independent from each other and fully composable Trace contains complete history of the process execution, thus making certain types of concurrency bugs, like livelocks, easier to detect Additionally, snabbkaffe supports fault and delay injection into the system to test correctness of the supervision trees and rare code paths.","ref":"readme.html","title":"Snabbkaffe","type":"extras"},{"doc":"Add the following to rebar.config : { deps , [ { snabbkaffe , { git , &quot;https://github.com/kafka4beam/snabbkaffe.git&quot; , { tag , &quot;0.18.0&quot; } } } ] } .","ref":"readme.html#getting-started","title":"Snabbkaffe - Getting started","type":"extras"},{"doc":"Snabbkaffe requires to instrument the code with the trace points. This is a manual process. While it is possible to intercept regular logs, snabbkaffe doesn't do that, and introduces a separate API instead. This is a conscious decision: Regular logs are formatted for humans, and they may be tricky to analyze by the machine. Usually programmers do not expect test failures from merely changing the log messages. Using a distinct API helps indicating that the event is used somewhere. Debug messages introduce some overhead, even when they are disabled by the logger configuration. Regular snabbkaffe traces completely disappear from the release build, so they can be placed in hot loops. Snabbkaffe collector is designed to preserve ordering of the events, while logger can use buffering, filters or performance optimizations that are undesirable for the tests. Snabbkaffe trace points are more than just logs, they can be used to modify the behavior of the SUT as well The trace macros are defined in a header file that can be included like this: - include_lib ( &quot;snabbkaffe/include/trace.hrl&quot; ) .","ref":"emitting_events.html","title":"Emitting events","type":"extras"},{"doc":"Snabbkaffe events are produced using ?tp macro (tp stands for &quot;trace point&quot;). In its basic form it looks like this: ? tp ( my_event , \#{ parameter1 =&gt; 1 , parameter2 =&gt; foo , parameter3 =&gt; { 1 , 3 } } ) The first argument of the macro is called &quot;kind&quot;. It identifies the trace event. Ideally, it should be unique through out the code base, since it will simplify analysis of the trace. Kind can be an atom or a string. The second parameter is a map that contains any additional data for the event. The keys should be atoms, and the values are free-form. The resulting event in will look like this in the trace: { ? snk_kind =&gt; my_event , ? snk_meta =&gt; \#{ node =&gt; &#39;foo@localhost&#39; , time =&gt; &lt; monotonic time &gt; , pid =&gt; &lt; 0.343 . 0 &gt; , group_leader =&gt; &lt; 0.67 . 0 &gt; } , parameter1 =&gt; 1 , parameter2 =&gt; foo , parameter3 =&gt; { 1 , 3 } } If logger:update_process_metadata/1 is used to add metadata to the process (e.g. domain ), it will be added to ?snk_meta field. This macro disappears from the release build. A trace point may be useful as a log message in the release build. In this case, a different form of ?tp can be used: ? tp ( notice , &quot;Remote process died&quot; , \#{ reason =&gt; Reason , my_state =&gt; State } ) The first argument of the macro is log level, as used by logger . The others are equivalent to the previous form of the macro.","ref":"emitting_events.html#tp","title":"Emitting events - ?tp","type":"extras"},{"doc":"Sometimes it is useful to emit two events before and after some action executes. ?tp_span is a shortcut that does that: ? tp_span ( foo , \#{ field1 =&gt; 42 , field2 =&gt; foo } , begin . . . end ) . It produces the following trace events: \#{ ? snk_kind =&gt; foo , ? snk_meta =&gt; \#{ . . . } , ? snk_span =&gt; start , field1 =&gt; 42 , field2 =&gt; foo } , . . . \#{ ? snk_kind =&gt; foo , ? snk_meta =&gt; \#{ . . . } , ? snk_span =&gt; { complete , ReturnValue } , field1 =&gt; 42 , field2 =&gt; foo } Log level for the span can be specified like in the previous example.","ref":"emitting_events.html#tp_span","title":"Emitting events - ?tp_span","type":"extras"},{"doc":"Snabbkaffe supports distributed tracing. snabbkaffe:forward_trace(RemoteNode) function will tell the remote node to forward traces to the local collector.","ref":"emitting_events.html#distributed-tracing","title":"Emitting events - Distributed tracing","type":"extras"},{"doc":"By default the values of ?snk_kind , ?snk_meta and ?snk_span macros are set to '$kind' , '~meta' and '$span' respectively. This is done so kind and span fields appear first in the printout, and meta field is printed last. It makes traces and logs more readable. But it is possible to redefine these macros, e.g.: { erl_opts , [ { d , snk_kind , msg } ] } . Please keep in mind that it may collide with the regular fields, so it's better to avoid changing the defaults.","ref":"emitting_events.html#snk_kind-snk_meta-and-snk_span-macros","title":"Emitting events - ?snk_kind, ?snk_meta and ?snk_span macros","type":"extras"},{"doc":"By default the behavior of trace points is the following: in test build they emit traces, and in release build they either disappear or become regular logs. In some tricky test setups it may be necessary to override the default behavior. This can be done be defining SNK_COLLECTOR macro before including trace.hrl : %% Force snabbkaffe collector: - define ( SNK_COLLECTOR , true ) . - include_lib ( &quot;snabbkaffe/include/trace.hrl&quot; ) . %% Force regular logs: - define ( SNK_COLLECTOR , false ) . - include_lib ( &quot;snabbkaffe/include/trace.hrl&quot; ) .","ref":"emitting_events.html#snk_collector","title":"Emitting events - ?SNK_COLLECTOR","type":"extras"},{"doc":"This chapter describes the high-level structure of the snabbkaffe testcase. Most of the work is done by ?check_trace macro, which can be placed inside eunit, Common Test or proper testcase.","ref":"running.html","title":"Running the testcases","type":"extras"},{"doc":"In the most basic form, Snabbkaffe tests look like this: - module ( running_example ) . - compile ( export_all ) . - include_lib ( &quot;proper/include/proper.hrl&quot; ) . - include_lib ( &quot;eunit/include/eunit.hrl&quot; ) . - include_lib ( &quot;snabbkaffe/include/snabbkaffe.hrl&quot; ) . basic_test ( ) -&gt; ? check_trace ( %% Run stage: begin ? tp ( some_event , \#{ foo =&gt; foo , bar =&gt; bar } ) end , %% Check stage: fun ( RunStageResult , Trace ) -&gt; ? assertMatch ( ok , RunStageResult ) , ? assertMatch ( [ \#{ foo := _ } ] , ? of_kind ( some_event , Trace ) ) end ) . ?check_trace macro performs the following steps: Start the snabbkaffe supervision tree Produce \#{?snk_kind := '$trace_begin'} event Execute the code specified in the run stage section Wait for the silence interval (if timeout option is set, see below) Produce \#{?snk_kind := '$trace_end'} event Collect the trace Execute the offline checks on the collected trace If either run stage or check stage fails, ?check_trace dumps the collected trace to a file and throws an exception that is detected by eunit or Common Test. The trace dumps are placed to snabbkaffe sub-directory of the current working directory. If the return value from the run stage is not needed in the check stage, it can be omitted: ignore_return_test ( ) -&gt; ? check_trace ( %% Run stage: begin ok end , %% Check stage: fun ( _ Trace ) -&gt; ok end ) . If the testcase allocates any resources that should be released after the completion of the run stage, it is recommended to use the following construct: try_after_test ( ) -&gt; ? check_trace ( try %% Allocate resources... ets : new ( foo , [ named_table ] ) , %% Run test ok after ets : delete ( foo ) end , %% Check stage: [ fun ? MODULE : common_trace_spec / 1 , fun ? MODULE : common_trace_spec / 2 , { &quot;Another trace spec&quot; , fun ( _ Result , _ Trace ) -&gt; true end } ] ) . %% Make sure the trace is a list: common_trace_spec ( Trace ) -&gt; ? assert ( is_list ( Trace ) ) . %% Check the return value of the run stage: common_trace_spec ( Result , Trace ) -&gt; ? assertMatch ( ok , Result ) . Notice another new thing in the above example: the check stage is defined as a list of callbacks. This form allows to reuse trace specifications in multiple tests.","ref":"running.html#check_trace","title":"Running the testcases - check_trace","type":"extras"},{"doc":"?check_trace macro can accept some additional arguments: options_test_ ( ) -&gt; { timeout , 15 , [ fun ( ) -&gt; ? check_trace ( \#{ timetrap =&gt; 10000 , timeout =&gt; 1000 } , %% Run stage: ok , %% Check stage: [ ] ) end ] } . timetrap specifies how long the run stage can execute (in milliseconds). If this time is exceeded, the testcase fails and the trace is dumped. It is recommended to handle the timeouts using timetrap in ?check_trace , rather than at Common Test or eunit level, because it will produce a better error message and a trace dump. timeout parameter specifies &quot;silence interval&quot; for the testcase. If it is set to T , upon completion of the run stage snabbkaffe will wait for events arriving within T milliseconds after the last received event.","ref":"running.html#check_trace-options","title":"Running the testcases - check_trace options","type":"extras"},{"doc":"There are two useful macros for running snabbkaffe together with PropER : proper_test ( ) -&gt; Config = \#{ proper =&gt; \#{ numtests =&gt; 100 , timeout =&gt; 5000 , max_size =&gt; 100 } , timetrap =&gt; 1000 } , ? run_prop ( Config , prop ( ) ) . prop ( ) -&gt; ? FORALL ( { Ret , L } , { term ( ) , list ( ) } , ? check_trace ( %% Run stage: ok , %% Check stage: [ fun ? MODULE : common_trace_spec / 1 ] ) ) . proper key of the Config contains the parameters accepted by PropEr. Snabbkaffe will fall back to the default values (shown above) when parameter is absent. ?FORALL(Var, Generator, ?check_trace(...)) construct is used very often, so snabbkaffe provides a shortcut: simple_prop_test ( ) -&gt; ? run_prop ( \#{ } , simple_prop ( ) ) . simple_prop ( ) -&gt; ? forall_trace ( { Ret , L } , { term ( ) , list ( ) } , %% Run stage: ok , %% Check stage: [ fun ? MODULE : common_trace_spec / 1 ] ) . It is equivalent to the previous example.","ref":"running.html#integrating-with-proper","title":"Running the testcases - Integrating with PropEr","type":"extras"},{"doc":"Snabbkaffe encourages to perform validation offline, in the check stage of the testcase. However, some properties are impossible to verify offline. Also the run stage may want to be aware of the SUT's state for one reason or another: for example the testcase should know when the SUT is ready to accept test traffic, and when it is done processing it. To accommodate these needs, snabbkaffe allows to subscribe to the events in real time. There are a few helpful macros and functions for this.","ref":"waiting_events.html","title":"Waiting for events during run stage","type":"extras"},{"doc":"In the simplest case, ?block_until macro can be used. As the name suggests, it blocks execution of the testcase until an event matching a pattern is emitted: - module ( waiting_events_example ) . - include_lib ( &quot;eunit/include/eunit.hrl&quot; ) . - include_lib ( &quot;snabbkaffe/include/snabbkaffe.hrl&quot; ) . async_action ( ) -&gt; timer : sleep ( 10 ) , ? tp ( complete , \#{ } ) . basic_block_until_test ( ) -&gt; ? check_trace ( %% Run stage: begin %% Start some async job: spawn ( fun async_action / 0 ) , %% Wait for completion: ? block_until ( \#{ ? snk_kind := complete } ) end , %% Check stage: fun ( Trace ) -&gt; %% Verify that the run stage always waits for the event: ? assertMatch ( [ _ ] , ? of_kind ( complete , Trace ) ) end ) . The first argument of the macro is a match spec for the event. It can be quite fancy, for example it can include guards: ? block_until ( \#{ ? snk_kind := foo , bar := _ Bar } when _ Bar &gt; 2 ) If the matching event was found in the past, this macro will return immediately. By default, it waits indefinitely. In most situations it is the best behavior, since the timeout can be enforced by timetrap parameter discussed in the previous chapter. But in some cases it may be necessary to set the timeout in place: block_until_timeout_test ( ) -&gt; ? check_trace ( %% Run stage: begin %% Start some async job: spawn ( fun async_action / 0 ) , %% Wait for completion: ? assertMatch ( { ok , _ Event = \#{ } } , ? block_until ( \#{ ? snk_kind := complete } , _ Timeout = 200 ) ) end , %% Check stage: fun ( Trace ) -&gt; %% Verify that the run stage always waits for the event: ? assertMatch ( [ _ ] , ? of_kind ( complete , Trace ) ) end ) . In this case it may be desirable to check the return value, which can be either {ok, MatchingEvent} or timeout . Finally, the lookback behavior can be also customized: block_until_lookback_test ( ) -&gt; ? check_trace ( %% Run stage: begin %% Start some async job: spawn ( fun async_action / 0 ) , %% Wait for completion: ? block_until ( \#{ ? snk_kind := complete } , _ Timeout = 200 , _ BackInTime = 200 ) end , %% Check stage: fun ( Trace ) -&gt; %% Verify that the run stage always waits for the event: ? assertMatch ( [ _ ] , ? of_kind ( complete , Trace ) ) end ) . In this case the macro will only look for the events that were produced no longer than 200 ms in the past. However, this risks introducing flakiness into the testcase and should be avoided when possible. If you find yourself tuning the lookback values, it's better to switch to more advanced macros described in the next section. Finally, it's important to mention one caveat of this macro. Consider the following code: trigger_async_action ( foo ) , ? block_until ( \#{ ? snk_kind := action_complete } ) , trigger_async_action ( bar ) , ? block_until ( \#{ ? snk_kind := action_complete } ) It will not work as you expect, since the second invocation of the macro will match the event emitted in the past and return immediately. There are two solutions for this. Firstly, it will help to refine the matching pattern, e.g.: trigger_async_action ( foo ) , ? block_until ( \#{ ? snk_kind := action_complete , id := foo } ) , trigger_async_action ( bar ) , ? block_until ( \#{ ? snk_kind := action_complete , id := bar } ) This way the second ?block_until will ignore the unexpected events. The second solution is to specify the number of events that need to happen before unblocking the testcase: block_until_multiple_events_test ( ) -&gt; ? check_trace ( %% Run stage: begin %% Start async jobs: spawn ( fun async_action / 0 ) , spawn ( fun async_action / 0 ) , %% Wait for completion: snabbkaffe : block_until ( ? match_n_events ( 2 , \#{ ? snk_kind := complete } ) , _ Timeout = infinity , _ BackInTIme = infinity ) end , %% Check stage: fun ( Trace ) -&gt; %% Verify that the run stage waited for both events: ? assertMatch ( [ _ , _ ] , ? of_kind ( complete , Trace ) ) end ) .","ref":"waiting_events.html#block_until","title":"Waiting for events during run stage - block_until","type":"extras"},{"doc":"In the previous section we discussed how starting multiple async actions and waiting for their completion using ?block_until can lead to unexpected results. To address this issue, snabbkaffe provides ?wait_async_action macro: wait_async_action_test ( ) -&gt; ? check_trace ( %% Run stage: begin ? wait_async_action ( %% Trigger the action: begin spawn ( fun async_action / 0 ) end , %% Match pattern for the completion event: \#{ ? snk_kind := complete } ) , %% Repeat: ? wait_async_action ( %% Trigger the action: spawn ( fun async_action / 0 ) , %% Match pattern: \#{ ? snk_kind := complete } , %% Optional timeout: 100 ) end , %% Check stage: fun ( Trace ) -&gt; %% Verify completion of both actions: ? assertMatch ( [ _ , _ ] , ? of_kind ( complete , Trace ) ) end ) . ?wait_async_action installs a watcher before running the code from the first argument, so it doesn't have to look in the past. It returns a tuple {ActionResult, {ok, Event}} or {ActionResult, timeout} .","ref":"waiting_events.html#wait_async_action","title":"Waiting for events during run stage - wait_async_action","type":"extras"},{"doc":"When the testcase gets really complicated, and it has to wait for multiple events of different kinds, the simple macros may not be enough. In this section we will introduce the most flexible of the real time trace inspection APIs. A pair of snabbkaffe_collector:subscribe/3 and snabbkaffe_collector:receive_events/1 functions can be used in the tricky situations. The first one installs a watcher that will wait for a specified number of events matching a pattern. The second function takes an opaque reference returned by the first call, and blocks execution until the events are produced, or until timeout. subscribe_receive_test ( ) -&gt; ? check_trace ( begin { ok , SubRef } = snabbkaffe_collector : subscribe ( ? match_event ( \#{ ? snk_kind := complete } ) , _ NEvents = 2 , _ Timeout = infinity , _ BackInTime = 0 ) , spawn ( fun async_action / 0 ) , spawn ( fun async_action / 0 ) , ? assertMatch ( { ok , [ \#{ ? snk_kind := complete } , \#{ ? snk_kind := complete } ] } , snabbkaffe_collector : receive_events ( SubRef ) ) end , [ ] ) . The return type of receive_events is {ok | timeout, ListOfMatchedEvents} . If the number of received events is equal to the number of events specified in the subscribe call, the first element of the tuple is ok , and timeout otherwise. Pairs of subscribe / receive_events calls can be nested. Side note: both ?block_until and ?wait_async_action use this API internally.","ref":"waiting_events.html#subscribe-receive_events","title":"Waiting for events during run stage - subscribe/receive_events","type":"extras"},{"doc":"Snabbkaffe aims to eliminate &quot;retry function N times until it succeeds&quot; anti-pattern in tests. However, in some situations it's inevitable. So it provides a macro to avoid ad-hoc implementations: retry_test ( ) -&gt; ? retry ( _ Interval = 100 , _ NRepeats = 10 , begin %% Some code ok end ) . It will retry the body of the macro N times with a specified interval, until it succeeds (i.e. returns a value instead of throwing an exception).","ref":"waiting_events.html#retry","title":"Waiting for events during run stage - retry","type":"extras"},{"doc":"Snabbkaffe trace is a regular list, so any pure function or a list comprehension can be used to analyze it. Nonetheless, it comes with a few predefined macros and functions for trace analysis. Event correlations","ref":"offline_analysis.html","title":"Offline analysis of the traces","type":"extras"},{"doc":"?strict_causality macro is very powerful. It finds pairs of events matching &quot;cause&quot; and &quot;effect&quot; patterns, and verifies that each for each cause there is an effect, and vice versa. For example, the following test verifies that every received message eventually gets processed: - module ( offline_analysis_example ) . - include_lib ( &quot;snabbkaffe/include/snabbkaffe.hrl&quot; ) . - include_lib ( &quot;eunit/include/eunit.hrl&quot; ) . strict_causality_test ( ) -&gt; Trace = [ \#{ ? snk_kind =&gt; msg_received , id =&gt; 1 } , \#{ ? snk_kind =&gt; msg_received , id =&gt; 2 } , \#{ ? snk_kind =&gt; unrelated_event } , \#{ ? snk_kind =&gt; msg_processed , id =&gt; 2 } , \#{ ? snk_kind =&gt; msg_received , id =&gt; 3 } , \#{ ? snk_kind =&gt; msg_processed , id =&gt; 3 } , \#{ ? snk_kind =&gt; msg_processed , id =&gt; 1 } ] , ? assert ( ? strict_causality ( \#{ ? snk_kind := msg_received , id := _ Id } , %% Match cause \#{ ? snk_kind := msg_processed , id := _ Id } , %% Match event Trace ) ) . There is an extended version of the macro that allows to extend pattern matching with a guard expression, that can contain arbitrary code: Suppose we’re testing a “integer_to_list server”. The following code is all that is needed to express the property &quot;every request containing a certain number should be eventually replied with the number converted to the list&quot;: to_string_server_test ( ) -&gt; ExampleTrace = [ \#{ request =&gt; 1 } , \#{ reply =&gt; &quot;1&quot; } , \#{ request =&gt; 4 } , \#{ request =&gt; 4 } , \#{ reply =&gt; &quot;4&quot; } , \#{ reply =&gt; &quot;4&quot; } ] , ? assert ( ? strict_causality ( \#{ request := _ Req } , %% Match cause \#{ reply := _ Resp } , %% Match effect _ Resp =:= integer_to_list ( _ Req ) , %% Guard ExampleTrace ) ) . The return value of both macros is: true when pairs of events were found. false when the macro didn't find any matching events (neither causes nor effects). An exception is thrown when there are unmatched causes or effects. It is recommended to wrap this macro in an ?assert to verify that it actually matched the pairs of events. A few notes on the variable binding inside ?strict_causality -like macros: Variable bindings from outside of the macro are propagated into the match expression, e.g. Id = 2 , ? strict_causality ( \#{ req := Id } , . . . ) will only match events with req := 2 . Variable bindings from the &quot;cause&quot; match expression are propagated to the &quot;effect&quot; match expression. Variable bindings from both &quot;cause&quot; and &quot;effect&quot; expressions are propagated to the guard expression.","ref":"offline_analysis.html#strict_causality","title":"Offline analysis of the traces - ?strict_causality","type":"extras"},{"doc":"?causality macros work similarly to ?strict_causality , except they allow unmatched causes. For example, they can be used in the situations where some message loss is allowed.","ref":"offline_analysis.html#causality","title":"Offline analysis of the traces - ?causality","type":"extras"},{"doc":"?find_pairs is a macro that works similarly to ?strict_causality , except it returns the list of pairs and unmatched causes and effects: find_pairs_test ( ) -&gt; ExampleTrace = [ \#{ request =&gt; 1 } , \#{ reply =&gt; &quot;1&quot; } , \#{ request =&gt; 4 } , \#{ request =&gt; 4 } , \#{ reply =&gt; &quot;4&quot; } , \#{ reply =&gt; &quot;5&quot; } ] , ? assertMatch ( [ { pair , \#{ request := 1 } , \#{ reply := &quot;1&quot; } } , { pair , \#{ request := 4 } , \#{ reply := &quot;4&quot; } } , { unmatched_cause , \#{ request := 4 } } , { unmatched_effect , \#{ reply := &quot;5&quot; } } ] , ? find_pairs ( \#{ request := _ Req } , %% Match cause \#{ reply := _ Resp } , %% Match effect _ Resp =:= integer_to_list ( _ Req ) , %% Guard ExampleTrace ) ) . A simple version without the guard is present too.","ref":"offline_analysis.html#find_pairs","title":"Offline analysis of the traces - ?find_pairs","type":"extras"},{"doc":"?pair_max_depth macro takes a list of pairs produced by ?find_pairs macro and returns maximum nesting level of pairs. Its usecase is verification of overload protection routines. Suppose the system has a load limiter that prevents it from running more than N parallel tasks. ?pair_max_depth helps verifying this property.","ref":"offline_analysis.html#pair_max_depth","title":"Offline analysis of the traces - ?pair_max_depth","type":"extras"},{"doc":"snabbkaffe:strictly_increasing(List) function verifies A &gt; B &gt; C &gt; ... relation holds for all elements of the list: strictly_increasing_test ( ) -&gt; ? assert ( snabbkaffe : strictly_increasing ( [ 1 , 2 , 5 , 6 ] ) ) , ? assertNot ( snabbkaffe : strictly_increasing ( [ ] ) ) , ? assertError ( _ , snabbkaffe : strictly_increasing ( [ 1 , 2 , 2 , 3 ] ) ) . It returns true when the list is not empty and the elements of the list are increasing, false when the list is empty, and throws an exception when the property is violated.","ref":"offline_analysis.html#strictly_increasing","title":"Offline analysis of the traces - strictly_increasing","type":"extras"},{"doc":"snabbkaffe:increasing(List) function is similar to strictly_increasing , except it checks &gt;= property. Filtering events","ref":"offline_analysis.html#increasing","title":"Offline analysis of the traces - increasing","type":"extras"},{"doc":"This macro extracts events of certain kind or kinds: of_kind_test ( ) -&gt; Trace = [ \#{ ? snk_kind =&gt; foo } , \#{ ? snk_kind =&gt; bar } ] , ? assertMatch ( [ \#{ ? snk_kind := foo } ] , ? of_kind ( foo , Trace ) ) , ? assertMatch ( [ \#{ ? snk_kind := foo } , \#{ ? snk_kind := bar } ] , ? of_kind ( [ foo , bar ] , Trace ) ) .","ref":"offline_analysis.html#of_kind","title":"Offline analysis of the traces - ?of_kind","type":"extras"},{"doc":"?of_domain macro extracts events that were produced from processes with a specified logger domain. It supports match expressions, e.g.: of_domain_test ( ) -&gt; ? check_trace ( begin logger : update_process_metadata ( \#{ domain =&gt; [ my , domain ] } ) , ? tp ( foo , \#{ } ) end , fun ( Trace ) -&gt; ? assertMatch ( [ \#{ ? snk_kind := foo } ] , ? of_domain ( [ my | _ ] , Trace ) ) end ) .","ref":"offline_analysis.html#of_domain","title":"Offline analysis of the traces - ?of_domain","type":"extras"},{"doc":"?of_node macro extracts events that were produced on the specified node: of_node_test ( ) -&gt; ? check_trace ( begin ? tp ( foo , \#{ } ) end , fun ( Trace ) -&gt; ThisNode = node ( ) , ? assertMatch ( [ \#{ ? snk_kind := foo } ] , ? of_node ( ThisNode , Trace ) ) end ) . Splitting traces","ref":"offline_analysis.html#of_node","title":"Offline analysis of the traces - ?of_node","type":"extras"},{"doc":"?split_trace_at macro splits the trace into two parts: before and after the first occurrence of an event matching a pattern: split_trace_at_test ( ) -&gt; Trace = [ \#{ ? snk_kind =&gt; foo } , \#{ ? snk_kind =&gt; bar } , \#{ ? snk_kind =&gt; baz } , \#{ ? snk_kind =&gt; quux } , \#{ ? snk_kind =&gt; baz } ] , ? assertMatch ( { [ \#{ ? snk_kind := foo } , \#{ ? snk_kind := bar } ] , [ \#{ ? snk_kind := baz } | _ ] } , ? split_trace_at ( \#{ ? snk_kind := baz } , Trace ) ) . This macro is useful when the SUT changes state in some way, and its behavior is dependent on the state. The SUT should a emit an event indicating the state change. This event can be used in the check stage to split the trace in two parts, that can be analysed by two different rules.","ref":"offline_analysis.html#split_trace_at","title":"Offline analysis of the traces - ?split_trace_at","type":"extras"},{"doc":"?splitr_trace macro splits the list into multiple lists, where each sublist ends with an element that matches the pattern: splitl_macro_test ( ) -&gt; Trace = [ 1 , 2 , foo , 3 , 4 , foo ] , ? assertMatch ( [ [ 1 , 2 , foo ] , [ 3 , 4 , foo ] ] , ? splitl_trace ( foo , Trace ) ) .","ref":"offline_analysis.html#splitl_trace","title":"Offline analysis of the traces - ?splitl_trace","type":"extras"},{"doc":"?splitr_trace macro splits the list into multiple lists, where each sublist begins from an element that matches the pattern: splitr_macro_test ( ) -&gt; Trace = [ 1 , 2 , foo , 3 , 4 , foo ] , ? assertMatch ( [ [ 1 , 2 ] , [ foo , 3 , 4 ] , [ foo ] ] , ? splitr_trace ( E when is_atom ( E ) , Trace ) ) . Transforming events","ref":"offline_analysis.html#splitr_trace","title":"Offline analysis of the traces - ?splitr_trace","type":"extras"},{"doc":"?projection macro simplifies processing of the events by extracting values of their fields. It can extract one or multiple fields from the event: projection_single_field_test ( ) -&gt; Trace = [ \#{ ? snk_kind =&gt; foo , field1 =&gt; 1 } , \#{ ? snk_kind =&gt; foo , field1 =&gt; 2 } ] , ? assertMatch ( [ 1 , 2 ] , ? projection ( field1 , Trace ) ) . projection_test ( ) -&gt; Trace = [ \#{ ? snk_kind =&gt; foo , field1 =&gt; 1 } , \#{ ? snk_kind =&gt; foo , field1 =&gt; 2 } ] , ? assertMatch ( [ { foo , 1 } , { foo , 2 } ] , ? projection ( [ ? snk_kind , field1 ] , Trace ) ) . Misc. functions","ref":"offline_analysis.html#projection","title":"Offline analysis of the traces - ?projection","type":"extras"},{"doc":"?give_or_take macro can be used for approximate matching of numeric values: ? give_or_take ( _ Expected = 20 , _ Deviation = 2 , Value )","ref":"offline_analysis.html#give_or_take","title":"Offline analysis of the traces - ?give_or_take","type":"extras"},{"doc":"Snabbkaffe allows to inject crashes into any trace point. This is useful for tuning supervision trees and testing fault tolerance of the system. Snabbkaffe comes with a number of &quot;fault scenarios&quot; that emulate recoverable or transient failures.","ref":"fault_injection.html","title":"Injecting faults into the SUT","type":"extras"},{"doc":"?inject_crash macro is used for injecting faults into the system. The first argument of this macro is a match pattern for events, and the second argument is fault scenario. The return value is an opaque reference that can be used to remove the injected fault. Note: injected crashes are global, they work on the remote nodes. Example: - module ( fault_injection_example ) . - include_lib ( &quot;snabbkaffe/include/snabbkaffe.hrl&quot; ) . - include_lib ( &quot;eunit/include/eunit.hrl&quot; ) . inject_failure_test ( ) -&gt; ? check_trace ( %% Run stage begin %% Inject crashes: ? inject_crash ( \#{ ? snk_meta := \#{ domain := [ my , domain | _ ] } } , snabbkaffe_nemesis : always_crash ( ) ) , %% Start the system: logger : update_process_metadata ( \#{ domain =&gt; [ my , domain ] } ) , %% Any trace point matching the injected crash pattern will fail now: ? assertExit ( _ , ? tp ( some_event , \#{ } ) ) end , fun ( Trace ) -&gt; %% Injected failures are recorded in the trace: ? assertMatch ( [ _ ] , ? of_kind ( snabbkaffe_crash , Trace ) ) end ) .","ref":"fault_injection.html#inject_crash","title":"Injecting faults into the SUT - ?inject_crash","type":"extras"},{"doc":"snabbkaffe_nemesis:fix_crash(Ref) removes an injected crash. It takes one argument: the reference returned by ?inject_crash macro. Fault scenarios","ref":"fault_injection.html#fix_crash","title":"Injecting faults into the SUT - fix_crash","type":"extras"},{"doc":"As the name suggests, this fault scenario always generates crashes. Example: ? inject_crash ( . . . , snabbkaffe_nemesis : always_crash ( ) )","ref":"fault_injection.html#always_crash","title":"Injecting faults into the SUT - always_crash","type":"extras"},{"doc":"This fault scenario imitates a recoverable crash. It will generate N crashes, then the code will execute normally. ? inject_crash ( . . . , snabbkaffe_nemesis : recover_after ( 10 ) )","ref":"fault_injection.html#recover_after","title":"Injecting faults into the SUT - recover_after","type":"extras"},{"doc":"This fault scenario generates random crashes with probability P . Example: ? inject_crash ( . . . , snabbkaffe_nemesis : random_crash ( 0.1 ) )","ref":"fault_injection.html#random_crash","title":"Injecting faults into the SUT - random_crash","type":"extras"},{"doc":"This fault scenario generates crashes periodically. It takes three parameters: period: number of matching events until the cycle repeats duty cycle: ratio of successes to failures phase: 0..2π, acts similar to phase of a sine function Example: snabbkaffe_nemesis : periodic_crash ( _ Period = 10 , _ DutyCycle = 0.5 , _ Phase = math : pi ( ) ) To illustrate how the parameters affect the behavior, consider the examples: snabbkaffe_nemesis:periodic_crash(4, 0.5, 0) : [ok,ok,crash,crash,ok,ok,crash,crash,ok,ok,crash,...] snabbkaffe_nemesis:periodic_crash(4, 0.5, math:pi()) : [crash,crash,ok,ok,crash,crash,ok,ok,crash,crash,...] snabbkaffe_nemesis:periodic_crash(4, 0.25, 0) : [ok,crash,crash,crash,ok,crash,crash,crash,ok,crash,crash,...]","ref":"fault_injection.html#periodic_crash","title":"Injecting faults into the SUT - periodic_crash","type":"extras"},{"doc":"Finally, snabbkaffe can not only check the ordering of events, but also affect it. This is useful for testing code for potential race conditions and exploring rare scenarios. For example, there may be two processes A and B that are needed for processing data. Usually process A initialises earlier than B , but scheduling injection allows to reliably test what happens when B initialises earlier. It is also useful for testing state machines in situ : it can delay state transition and force the FSM to accept events in the specified state.","ref":"scheduling_injection.html","title":"Injecting schedulings into the SUT","type":"extras"},{"doc":"? force_ordering ( ContinuePattern [ , N ] , DelayedPattern [ , Guard ] ) Parameters: ContinuePattern : match pattern for the event that should happen first. N (optional): number of event matching ContinuePattern that should happen first. Defaults to 1. DelayedPattern : match pattern for the events that will be delayed until N ContinuePattern events are emitted. Guard (optional): guard function similar to that in ?strict_causality pattern. Example: - module ( scheduling_injection_example ) . - include_lib ( &quot;eunit/include/eunit.hrl&quot; ) . - include_lib ( &quot;snabbkaffe/include/snabbkaffe.hrl&quot; ) . force_ordering_test ( ) -&gt; ? check_trace ( %% Check trace: begin %% Inject schedulings: ? force_ordering ( \#{ id := 1 } , \#{ id := 2 } ) , ? force_ordering ( \#{ id := 2 } , \#{ id := 3 } ) , %% Start a few concurrent processes: spawn ( fun ( ) -&gt; ? tp ( foo , \#{ id =&gt; 1 } ) end ) , spawn ( fun ( ) -&gt; ? tp ( foo , \#{ id =&gt; 2 } ) end ) , spawn ( fun ( ) -&gt; ? tp ( foo , \#{ id =&gt; 3 } ) end ) , %% Wait completion: [ ? block_until ( \#{ id := I } ) || I &lt;- lists : seq ( 1 , 3 ) ] end , fun ( Trace ) -&gt; %% Under the normal conditions the three processes can %% execute in any order, but since we injected the %% scheduling, they will always run in this order: ? assertMatch ( [ 1 , 2 , 3 ] , ? projection ( id , ? of_kind ( foo , Trace ) ) ) end ) . Warning: this macro will create a deadlock if the forced ordering reverses logical causality of the events.","ref":"scheduling_injection.html#force_ordering","title":"Injecting schedulings into the SUT - ?force_ordering","type":"extras"},{"doc":"","ref":"changelog.html","title":"Changelog","type":"extras"},{"doc":"Features Publish documentation Fixes snabbkaffe_collector:subscribe and receive_events have been moved to snabbkaffe module","ref":"changelog.html#1-0-0","title":"Changelog - 1.0.0","type":"extras"},{"doc":"Features Introduce snabbkaffe:increasing and snabbkaffe:check_conseq_relation functions","ref":"changelog.html#0-18-0","title":"Changelog - 0.18.0","type":"extras"},{"doc":"Features Introduce snabbkaffe:dump_trace/1 function that saves trace to a file Allow to change behavior of trace points by defining SNK_COLLECTOR macro as true or false (the latter means log trace points instead of collecting them) Fixes Fix compilation warnings Improve output of snabbkaffe:strictly_increasing function Non-BC changes API of find_pairs function and macro are heavily reworked: Strict flag has been removed and the return type has been changed. Now they don't crash when they find an effect without a cause, but instead add it to the list.","ref":"changelog.html#0-17-0","title":"Changelog - 0.17.0","type":"extras"},{"doc":"Features Passing return value to the check stage callback is made optional: ? check_trace ( RunStage , fun ( Trace ) -&gt; . . . end ) Check stage supports a list of callbacks in the following form: ? check_trace ( RunStage , [ fun trace_check / 1 , fun another_trace_check / 2 , { &quot;There are no crashes&quot; , fun ( Trace ) -&gt; . . . end } , { &quot;Another important check&quot; , fun ( Return , Trace ) -&gt; . . . end } ] ) Fixes Fix timetrap while waiting for the silence interval Non-BC changes The check stage now must return ok or true to indicate success","ref":"changelog.html#0-16-0","title":"Changelog - 0.16.0","type":"extras"},{"doc":"Fixes Fix race condition in the injected fault Features Improved event subscription mechanism using new APIs: snabbkaffe_collector:subcribe and receive_events , that aim to replace the ?wait_async_action macro: { ok , Sub } = snabbkaffe_collector : subscribe ( ? match_event ( \#{ ? snk_kind := foo } ) , _ Quantity = 2 , _ Timeout = infinity , _ BackInTime = 0 ) , . . . trigger async action . . . ? assertMatch ( { ok , [ \#{ ? snk_kind := foo , n := 1 } , \#{ ? snk_kind := foo , n := 2 } ] } , snabbkaffe_collector : receive_events ( Sub ) ) , ?block_until macro support waiting for multiple events snabbkaffe:fix_ct_logging function includes node name in the logs Non-BC fixes Error injection uses erlang:exit instead of erlang:error . This may affect a small portion of testcases that specifically expect certain errors","ref":"changelog.html#0-15-0","title":"Changelog - 0.15.0","type":"extras"},{"doc":"Fixes Fix ?of_kind and ?of_domain macros","ref":"changelog.html#0-14-1","title":"Changelog - 0.14.1","type":"extras"},{"doc":"Features Timetrap: fail a testcase and dump the trace if the run stage takes too long to complete","ref":"changelog.html#0-14-0","title":"Changelog - 0.14.0","type":"extras"},{"doc":"Features Allow user to redefine the values of ?snk_kind , ?snk_span and ?snk_meta macros","ref":"changelog.html#0-13-0","title":"Changelog - 0.13.0","type":"extras"},{"doc":"Features Allow to specify severity for ?tp_span macro Fixes Move MFA tuple to the log metadata in the prod mode","ref":"changelog.html#0-12-0","title":"Changelog - 0.12.0","type":"extras"},{"doc":"Non-BC fixes ?split_trace_at , ?splitl_trace and ?splitr_trace macros now use inverse matching. It was the original intention, but the fix is non-BWC","ref":"changelog.html#0-11-0","title":"Changelog - 0.11.0","type":"extras"},{"doc":"Features snabbkaffe.hrl has been split into parts related to tracing and running the tests","ref":"changelog.html#0-10-1","title":"Changelog - 0.10.1","type":"extras"},{"doc":"Breaking changes snabbkaffe:strictly_increasing function returns false when the list is empty Features Add ?tp_span macro that wraps around a piece of code and emits trance events when entering and completing it Fixes Fix type specs","ref":"changelog.html#0-10-0","title":"Changelog - 0.10.0","type":"extras"},{"doc":"Features Any term can be used as metric name snabbkaffe:push_stat work on remote nodes Fixes Don't filter out metrics that have less than 5 samples","ref":"changelog.html#0-9-1","title":"Changelog - 0.9.1","type":"extras"},{"doc":"Breaking changes Tracepoints without severity no longer appear in the release build as debug logs. Old behavior can be emulated by explicitly specifying debug severity using ?tp(debug, Kind, Data) macro Timestamp field ( tp ) has been moved to the metadata and renamed to time . Its resolution has been changed to microsecond. Features Add logger process metadata to the trace events Add ?of_domain and ?of_node macros Severity level of tracepoints affects severity of logs in the debug mode","ref":"changelog.html#0-9-0","title":"Changelog - 0.9.0","type":"extras"},{"doc":"Fixes Fix execution of tracepoints in TEST profile while snabbkaffe collector is not running","ref":"changelog.html#0-8-2","title":"Changelog - 0.8.2","type":"extras"},{"doc":"Breaking changes Change return type of ?causality and ?strict_causality macros to boolean Features Introduce ?force_ordering macro Introduce support for distributed tracing. snabbkaffe:forward_trace/1 function. Fixes Remove dependency on bear","ref":"changelog.html#0-8-1","title":"Changelog - 0.8.1","type":"extras"},{"doc":"Breaking changes Drop support for OTP releases below 21 Drop hut dependency, now in the release profile snabbkaffe always uses kernel logger Features Kind of the trace point now can be a string Concuerror support Fixes ?projection_complete and ?projection_is_subset macros now support multiple fields Allow usage of guards in the match patterns in all macros","ref":"changelog.html#0-7-0","title":"Changelog - 0.7.0","type":"extras"},{"doc":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. &quot;License&quot; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &quot;Licensor&quot; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. &quot;Legal Entity&quot; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity exercising permissions granted by this License. &quot;Source&quot; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. &quot;Object&quot; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. &quot;Work&quot; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). &quot;Derivative Works&quot; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. &quot;Contribution&quot; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, &quot;submitted&quot; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as &quot;Not a Contribution.&quot; &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a &quot;NOTICE&quot; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets &quot;[]&quot; replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same &quot;printed page&quot; as the copyright notice for easier identification within third-party archives. Copyright 2020-2022 k32 Copyright 2019-2020 Klarna Bank AB Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"license.html","title":"LICENSE","type":"extras"}]